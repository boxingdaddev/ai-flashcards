name: Auto-add versioned issues to Projects v2

on:
  issues:
    types: [opened, labeled]

# Configure once; reuse for all versions. Title becomes "StudyBuddy v0.3.2", etc.
env:
  PROJECT_PREFIX: "StudyBuddy "
  PROJECT_SUFFIX: ""

permissions:
  contents: read
  issues: write
  projects: write

jobs:
  add-to-project:
    # Only run if the issue has (or was just given) a semver-like label vX.Y.Z
    if: >
      contains(join(github.event.issue.labels.*.name, ' '), 'v') ||
      github.event.action == 'labeled'
    runs-on: ubuntu-latest

    steps:
      - name: Determine version label on this issue
        id: pick
        run: |
          # Gather existing labels
          LABELS_JSON='${{ toJson(github.event.issue.labels.*.name) }}'
          VERSIONS=$(echo "$LABELS_JSON" | jq -r '.[] | select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))' || true)

          # If we just added a label, prefer that one if it matches
          if [ "${{ github.event.action }}" = "labeled" ]; then
            NEW="${{ github.event.label.name }}"
            if echo "$NEW" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
              VERSIONS="$NEW"
            fi
          fi

          if [ -z "$VERSIONS" ]; then
            echo "No version label (vX.Y.Z) found. Exiting."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          VERSION=$(echo "$VERSIONS" | head -n1)
          echo "Using VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Stop if no version
        if: steps.pick.outputs.skip == 'true'
        run: echo "No-op."

      - name: Find or create Projects v2 board
        id: proj
        if: steps.pick.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="${{ github.repository_owner }}"
          TITLE="${PROJECT_PREFIX}${{ steps.pick.outputs.version }}${PROJECT_SUFFIX}"

          # Look for an existing user project with that title
          PID=$(gh api graphql -F login="$OWNER" -f query='
            query($login:String!) {
              user(login:$login) {
                projectsV2(first:100) { nodes { id title number } }
              }
            }' --jq '.data.user.projectsV2.nodes[] | select(.title=="'"$TITLE"'") | .id' || true)

          if [ -z "$PID" ]; then
            echo "Creating project: $TITLE"
            OWNER_ID=$(gh api graphql -f query='query { viewer { id } }' --jq '.data.viewer.id')
            PID=$(gh api graphql -F ownerId="$OWNER_ID" -F title="$TITLE" -f query='
              mutation($ownerId:ID!, $title:String!) {
                createProjectV2(input:{ownerId:$ownerId, title:$title}) { projectV2 { id number } }
              }' --jq '.data.createProjectV2.projectV2.id')
          else
            echo "Found project id: $PID"
          fi

          echo "project_id=$PID" >> $GITHUB_OUTPUT
          echo "project_title=$TITLE" >> $GITHUB_OUTPUT

            - name: Add this issue to the project & set status
        if: steps.pick.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          NUM="${{ github.event.issue.number }}"

          # Get issue node ID
          ISSUE_ID=$(gh api graphql -F owner="$OWNER" -F repo="$REPO" -F number="$NUM" -f query='
            query($owner:String!, $repo:String!, $number:Int!) {
              repository(owner:$owner, name:$repo) { issue(number:$number) { id } }
            }' --jq '.data.repository.issue.id')

          # Add the issue to the project
          ITEM_ID=$(gh api graphql -F projectId="${{ steps.proj.outputs.project_id }}" -F contentId="$ISSUE_ID" -f query='
            mutation($projectId:ID!, $contentId:ID!) {
              addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) { item { id } }
            }' --jq '.data.addProjectV2ItemById.item.id')

          # Get the Status field ID for the project
          STATUS_FIELD_ID=$(gh api graphql -F projectId="${{ steps.proj.outputs.project_id }}" -f query='
            query($projectId:ID!) {
              node(id:$projectId) {
                ... on ProjectV2 {
                  fields(first:20) {
                    nodes {
                      id
                      name
                      dataType
                    }
                  }
                }
              }
            }' --jq '.data.node.fields.nodes[] | select(.name=="Status") | .id')

          # Get the "To Do" option ID
          TODO_OPTION_ID=$(gh api graphql -F projectId="${{ steps.proj.outputs.project_id }}" -f query='
            query($projectId:ID!) {
              node(id:$projectId) {
                ... on ProjectV2 {
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }' --jq '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="To Do") | .id')

          # Set the Status field to "To Do"
          gh api graphql -F projectId="${{ steps.proj.outputs.project_id }}" -F itemId="$ITEM_ID" -F fieldId="$STATUS_FIELD_ID" -F optionId="$TODO_OPTION_ID" -f query='
            mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { singleSelectOptionId: $optionId }
                }
              ) {
                projectV2Item { id }
              }
            }'

